!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("JDate",[],t):"object"==typeof exports?exports.JDate=t():e.JDate=t()}(this,(function(){return(()=>{var e={843:e=>{e.exports={MONTH_NAMES:["فروردین","اردیبهشت","خرداد","تیر","امرداد","شهریور","مهر","آبان","آذر","دی","بهمن","اسفند"],ABBR_DAYS:["۱ش","۲ش","۳ش","۴ش","۵ش","ج","ش"],DAYS_NAMES:["یکشنبه","دوشنبه","سه‌شنبه","چهارشنبه","پنج‌شنبه","جمعه","شنبه"],GREGORIAN_EPOCH:1721425.5,PERSIAN_EPOCH:1948320.5}}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,r),o.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var n={};return(()=>{"use strict";r.d(n,{default:()=>p});var e=r(843);function t(e,t){return e-Math.floor(e/t)*t}function a(e){return e&&1===e.length?"0".concat(e):e}function o(e,t){var r=e.match(/[yY]+/);if(!r)return e;switch(r[0]){case"YYYY":case"YYY":return o(e.replace(r,t.getFullYear()),t);case"YY":return o(e.replace(r,String(t.getFullYear()).slice(2)),t);default:return e}}function i(t,r){var n=t.match(/[mM]+/);if(!n)return t;switch(n[0]){case"M":return i(t.replace(n,r.getMonth()),r);case"MM":var o=a(r.getMonth().toString());return i(t.replace(n,o),r);case"MMM":case"MMMM":return i(t.replace(n,e.MONTH_NAMES[r.getMonth()-1]),r);default:return t}}function u(t,r){var n=t.match(/[dD]+/);if(!n)return t;switch(n[0]){case"D":return u(t.replace(n,r.getDate()),r);case"DD":var o=a(r.getDate().toString());return u(t.replace(n,o),r);case"d":case"dd":return u(t.replace(n,e.ABBR_DAYS[r.getDay()]),r);case"ddd":case"dddd":return u(t.replace(n,e.DAYS_NAMES[r.getDay()]),r);default:return t}}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var f=function(){function r(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r)}var n,a;return n=r,a=[{key:"leapGregorian",value:function(e){return e%4==0&&!(e%100==0&&e%400!=0)}},{key:"gregorianToJulian",value:function(t,n,a){var o;return o=n<=2?0:r.leapGregorian(t)?-1:-2,e.GREGORIAN_EPOCH-1+365*(t-1)+Math.floor((t-1)/4)+-Math.floor((t-1)/100)+Math.floor((t-1)/400)+Math.floor((367*n-362)/12+(o+a))}},{key:"julianToGregorian",value:function(n){var a=Math.floor(n-.5)+.5,o=a-e.GREGORIAN_EPOCH,i=Math.floor(o/146097),u=t(o,146097),l=Math.floor(u/36524),f=t(u,36524),s=Math.floor(f/1461),c=t(f,1461),h=Math.floor(c/365),p=400*i+100*l+4*s+h;4!==l&&4!==h&&(p+=1);var v,g=a-r.gregorianToJulian(p,1,1);v=a<r.gregorianToJulian(p,3,1)?0:(r.leapGregorian(p),1);var y=Math.floor((12*(g+v)+373)/367);return[p,y,a-r.gregorianToJulian(p,y,1)+1]}},{key:"leapPersian",value:function(e){return 1403===e||682*((e-(e>0?474:473))%2820+474+38)%2816<682}},{key:"persianToJulian",value:function(r,n,a){var o=r-(r>=0?474:473),i=474+t(o,2820);return a+(n<=7?31*(n-1):30*(n-1)+6)+Math.floor((682*i-110)/2816)+365*(i-1)+1029983*Math.floor(o/2820)+(e.PERSIAN_EPOCH-1)}},{key:"julianToPersian",value:function(e){var n,a=Math.floor(e)+.5,o=a-r.persianToJulian(475,1,1),i=Math.floor(o/1029983),u=t(o,1029983);if(1029982===u)n=2820;else{var l=Math.floor(u/366),f=t(u,366);n=Math.floor((2134*l+2816*f+2815)/1028522)+l+1}var s=n+2820*i+474;s<=0&&(s-=1);var c=a-r.persianToJulian(s,1,1)+1,h=c<=186?Math.ceil(c/31):Math.ceil((c-6)/30);return[s,h,a-r.persianToJulian(s,h,1)+1]}},{key:"persianToGregorian",value:function(e,t,n){var a=r.persianToJulian(e,t,n);return r.julianToGregorian(a)}},{key:"gregorianToPersian",value:function(e,t,n){var a=r.gregorianToJulian(e,t,n);return r.julianToPersian(a)}}],null&&l(n.prototype,null),a&&l(n,a),r}();function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var p=function(){function e(){c(this,e);for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];if(Array.isArray(r[0])||r[0]instanceof Date)this.input=r[0];else if(3===r.length)this.input=r;else{if(r.length)throw new Error("Unexpected input");this.input=new Date}Array.isArray(this.input)?(this.date=this.input.map((function(e){return parseInt(e,10)})),this._d=this.toGregorian()):this.input instanceof Date&&(this._d=this.input,this.date=e.toJalali(this.input))}var t,r,n;return t=e,n=[{key:"toJalali",value:function(e){var t=f.gregorianToJulian(e.getFullYear(),e.getMonth()+1,e.getDate());return f.julianToPersian(t)}},{key:"to_jalali",value:function(t){return e.toJalali(t)}},{key:"toGregorian",value:function(e,t,r){var n=f.julianToGregorian(f.persianToJulian(e,t,r));return new Date(+n[0],+n[1]-1,+n[2])}},{key:"to_gregorian",value:function(t,r,n){return e.toGregorian(t,r,n)}},{key:"isLeapYear",value:function(e){return f.leapPersian(e)}},{key:"daysInMonth",value:function(t,r){var n=t-Math.floor(r/12),a=r-12*Math.floor(r/12);return a<0?(a+=12,n-=1):0===a&&(a=12),a<6?31:a<11||e.isLeapYear(n)?30:29}}],(r=[{key:"toGregorian",value:function(){return e.toGregorian(this.date[0],this.date[1],this.date[2])}},{key:"getFullYear",value:function(){return this.date[0]}},{key:"setFullYear",value:function(e){return this.date[0]=parseInt(e,10),this.input=this.toGregorian(),this}},{key:"getMonth",value:function(){return this.date[1]}},{key:"setMonth",value:function(e){var t,r,n=function(e,t){if(t>12||t<=0){var r=Math.floor((t-1)/12);return[e-r,t-12*r]}return[e,t]}(this.getFullYear(),parseInt(e,10)),a=(r=2,function(e){if(Array.isArray(e))return e}(t=n)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,o=[],i=!0,u=!1;try{for(r=r.call(e);!(i=(n=r.next()).done)&&(o.push(n.value),!t||o.length!==t);i=!0);}catch(e){u=!0,a=e}finally{try{i||null==r.return||r.return()}finally{if(u)throw a}}return o}}(t,r)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?s(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return this.date[0]=a[0],this.date[1]=a[1],this.input=this.toGregorian(),this}},{key:"getDate",value:function(){return this.date[2]}},{key:"setDate",value:function(e){return this.date[2]=parseInt(e,10),this.input=this.toGregorian(),this}},{key:"getDay",value:function(){return this._d.getDay()}},{key:"format",value:function(e){var t=o(e,this);return u(t=i(t,this),this)}}])&&h(t.prototype,r),n&&h(t,n),e}()})(),n.default})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,