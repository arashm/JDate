!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("JDate",[],e):"object"==typeof exports?exports.JDate=e():t.JDate=e()}(this,(()=>(()=>{var t={51:t=>{t.exports={MONTH_NAMES:["فروردین","اردیبهشت","خرداد","تیر","امرداد","شهریور","مهر","آبان","آذر","دی","بهمن","اسفند"],ABBR_DAYS:["۱ش","۲ش","۳ش","۴ش","۵ش","ج","ش"],DAYS_NAMES:["یکشنبه","دوشنبه","سه‌شنبه","چهارشنبه","پنج‌شنبه","جمعه","شنبه"],GREGORIAN_EPOCH:1721425.5,PERSIAN_EPOCH:1948320.5,NON_LEAP_CORRECTION:[1502,1601,1634,1667,1700,1733,1766,1799,1832,1865,1898,1931,1964,1997,2030,2059,2063,2096,2129,2158,2162,2191,2195,2224,2228,2257,2261,2290,2294,2323,2327,2356,2360,2389,2393,2422,2426,2455,2459,2488,2492,2521,2525,2554,2558,2587,2591,2620,2624,2653,2657,2686,2690,2719,2723,2748,2752,2756,2781,2785,2789,2818,2822,2847,2851,2855,2880,2884,2888,2913,2917,2921,2946,2950,2954,2979,2983,2987]}}},e={};function r(n){var a=e[n];if(void 0!==a)return a.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var n={};return(()=>{"use strict";r.d(n,{default:()=>g});var t=r(51);function e(t,e){return t-Math.floor(t/e)*e}function a(t){return t&&1===t.length?"0".concat(t):t}function o(t,e){var r=t.match(/[yY]+/);if(!r)return t;switch(r[0]){case"YYYY":case"YYY":return o(t.replace(r,e.getFullYear()),e);case"YY":return o(t.replace(r,String(e.getFullYear()).slice(2)),e);default:return t}}function i(e,r){var n=e.match(/[mM]+/);if(!n)return e;switch(n[0]){case"M":return i(e.replace(n,r.getMonth()),r);case"MM":var o=a(r.getMonth().toString());return i(e.replace(n,o),r);case"MMM":case"MMMM":return i(e.replace(n,t.MONTH_NAMES[r.getMonth()-1]),r);default:return e}}function u(e,r){var n=e.match(/[dD]+/);if(!n)return e;switch(n[0]){case"D":return u(e.replace(n,r.getDate()),r);case"DD":var o=a(r.getDate().toString());return u(e.replace(n,o),r);case"d":case"dd":return u(e.replace(n,t.ABBR_DAYS[r.getDay()]),r);case"ddd":case"dddd":return u(e.replace(n,t.DAYS_NAMES[r.getDay()]),r);default:return e}}function l(t){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},l(t)}function f(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,c(n.key),n)}}function c(t){var e=function(t,e){if("object"!=l(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=l(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==l(e)?e:e+""}var s=function(){function r(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r)}return n=r,a=[{key:"leapGregorian",value:function(t){return t%4==0&&!(t%100==0&&t%400!=0)}},{key:"gregorianToJulian",value:function(e,n,a){var o;return o=n<=2?0:r.leapGregorian(e)?-1:-2,t.GREGORIAN_EPOCH-1+365*(e-1)+Math.floor((e-1)/4)+-Math.floor((e-1)/100)+Math.floor((e-1)/400)+Math.floor((367*n-362)/12+(o+a))}},{key:"julianToGregorian",value:function(n){var a=Math.floor(n-.5)+.5,o=a-t.GREGORIAN_EPOCH,i=Math.floor(o/146097),u=e(o,146097),l=Math.floor(u/36524),f=e(u,36524),c=Math.floor(f/1461),s=e(f,1461),y=Math.floor(s/365),p=400*i+100*l+4*c+y;4!==l&&4!==y&&(p+=1);var h,v=a-r.gregorianToJulian(p,1,1);h=a<r.gregorianToJulian(p,3,1)?0:(r.leapGregorian(p),1);var g=Math.floor((12*(v+h)+373)/367);return[p,g,a-r.gregorianToJulian(p,g,1)+1]}},{key:"leapPersian",value:function(e){return!t.NON_LEAP_CORRECTION.includes(e)&&(!!t.NON_LEAP_CORRECTION.includes(e-1)||(25*e+11)%33<8)}},{key:"persianToJulian",value:function(r,n,a){var o=r-(r>=0?474:473),i=474+e(o,2820);return a+(n<=7?31*(n-1):30*(n-1)+6)+Math.floor((682*i-110)/2816)+365*(i-1)+1029983*Math.floor(o/2820)+(t.PERSIAN_EPOCH-1)}},{key:"julianToPersian",value:function(t){var n,a=Math.floor(t)+.5,o=a-r.persianToJulian(475,1,1),i=Math.floor(o/1029983),u=e(o,1029983);if(1029982===u)n=2820;else{var l=Math.floor(u/366),f=e(u,366);n=Math.floor((2134*l+2816*f+2815)/1028522)+l+1}var c=n+2820*i+474;c<=0&&(c-=1);var s=a-r.persianToJulian(c,1,1)+1,y=s<=186?Math.ceil(s/31):Math.ceil((s-6)/30);return[c,y,a-r.persianToJulian(c,y,1)+1]}},{key:"persianToGregorian",value:function(t,e,n){var a=r.persianToJulian(t,e,n);return r.julianToGregorian(a)}},{key:"gregorianToPersian",value:function(t,e,n){var a=r.gregorianToJulian(t,e,n);return r.julianToPersian(a)}}],null&&f(n.prototype,null),a&&f(n,a),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,a}();function y(t){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},y(t)}function p(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=Array(e);r<e;r++)n[r]=t[r];return n}function h(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,v(n.key),n)}}function v(t){var e=function(t,e){if("object"!=y(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=y(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==y(e)?e:e+""}var g=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];if(Array.isArray(r[0])||r[0]instanceof Date)this.input=r[0];else if(3===r.length)this.input=r;else{if(r.length)throw new Error("Unexpected input");this.input=new Date}Array.isArray(this.input)?(this.date=this.input.map((function(t){return parseInt(t,10)})),this._d=this.toGregorian()):this.input instanceof Date&&(this._d=this.input,this.date=t.toJalali(this.input))}return e=t,n=[{key:"toJalali",value:function(t){var e=s.gregorianToJulian(t.getFullYear(),t.getMonth()+1,t.getDate());return s.julianToPersian(e)}},{key:"to_jalali",value:function(e){return t.toJalali(e)}},{key:"toGregorian",value:function(t,e,r){var n=s.julianToGregorian(s.persianToJulian(t,e,r));return new Date(+n[0],+n[1]-1,+n[2])}},{key:"to_gregorian",value:function(e,r,n){return t.toGregorian(e,r,n)}},{key:"isLeapYear",value:function(t){return s.leapPersian(t)}},{key:"daysInMonth",value:function(e,r){var n=e-Math.floor(r/12),a=r-12*Math.floor(r/12);return a<0?(a+=12,n-=1):0===a&&(a=12),a<6?31:a<11||t.isLeapYear(n)?30:29}}],(r=[{key:"toGregorian",value:function(){return t.toGregorian(this.date[0],this.date[1],this.date[2])}},{key:"getFullYear",value:function(){return this.date[0]}},{key:"setFullYear",value:function(t){return this.date[0]=parseInt(t,10),this.input=this.toGregorian(),this}},{key:"getMonth",value:function(){return this.date[1]}},{key:"setMonth",value:function(t){var e=function(t,e){if(e>12||e<=0){var r=Math.floor((e-1)/12);return[t-r,e-12*r]}return[t,e]}(this.getFullYear(),parseInt(t,10)),r=function(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,a,o,i,u=[],l=!0,f=!1;try{if(o=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=o.call(r)).done)&&(u.push(n.value),u.length!==e);l=!0);}catch(t){f=!0,a=t}finally{try{if(!l&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(f)throw a}}return u}}(t,e)||function(t,e){if(t){if("string"==typeof t)return p(t,e);var r={}.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?p(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e,2);return this.date[0]=r[0],this.date[1]=r[1],this.input=this.toGregorian(),this}},{key:"getDate",value:function(){return this.date[2]}},{key:"setDate",value:function(t){return this.date[2]=parseInt(t,10),this.input=this.toGregorian(),this}},{key:"getDay",value:function(){return this._d.getDay()}},{key:"format",value:function(t){var e=o(t,this);return u(e=i(e,this),this)}}])&&h(e.prototype,r),n&&h(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,r,n}()})(),n.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,